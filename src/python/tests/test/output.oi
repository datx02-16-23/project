{"body": [{"source": "main.py", "operation": "write", "beginLine": 73, "endLine": 76, "operationBody": {"target": {"identifier": "graph"}, "value": [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]}}, {"source": "main.py", "operation": "write", "beginLine": -1, "endLine": -1, "operationBody": {"source": {"identifier": "graph"}, "target": {"identifier": "graph"}, "value": [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]}}], "header": {"sources": {"main.py": ["import copy", "NOT_AN_EDGE = -1", "", "def is_edge(graph,row,col):", "\treturn graph[row][col] != NOT_AN_EDGE", "", "def move_ok(graph,row,col):", "\treturn (", "\t\trow < len(graph) and", "\t\trow >= 0 and", "\t\tcol < len(graph) and", "\t\tcol >= 0 and", "\t\tis_edge(graph,row,col)", "\t)", "", "def get_move(graph,row,col):", "\treturn [(row,col)] if move_ok(graph,row,col) else []", "", "def get_moves(graph,row,col):", "\tmoves = []", "\tmoves += get_move(graph,row+1,col)", "\tmoves += get_move(graph,row-1,col)", "\tmoves += get_move(graph,row,col+1)", "\tmoves += get_move(graph,row,col-1)", "\treturn moves", "", "def move_legal(path,move,visited=None):", "\treturn move not in path and move not in visited if visited is not None else True", "", "def has_legal_move(graph,path,node):", "\tmoves = get_moves(graph,*node)", "\tfor move in moves:", "\t\tif move_legal(path,move):", "\t\t\treturn True", "\treturn False", "", "def cost(graph,row,col):", "\treturn graph[row][col]", "", "def is_goal(start,goal):", "\treturn start == goal", "", "def backtrack(graph,path):", "\tnode = path.pop()", "\twhile not has_legal_move(graph,path,node): node = path.pop()", "\treturn path", "", "def cost_first(graph,start,goal):", "\tvisited = []", "\tcurrent = start", "\tpath = []", "\twhile not is_goal(current,goal):", "\t\tpath.append(current)", "\t\tmoves = get_moves(graph,*current)", "\t\tbest_move = None", "\t\tfor move in moves:", "\t\t\tif is_goal(move,goal):", "\t\t\t\tbest_move = move", "\t\t\t\tbreak", "\t\t\tif move_legal(path,move,visited):", "\t\t\t\tif best_move is None or cost(graph,*move) <= cost(graph,*best_move):", "\t\t\t\t\tbest_move = move", "\t\tif best_move is None:", "\t\t\tvisited.append(current)", "\t\t\tpath = backtrack(graph,path)", "\t\t\tcurrent = path.pop() if len(path) > 0 else start", "\t\telse:", "\t\t\tcurrent = best_move", "\t\tif len(visited) > 5:", "\t\t\tbreak", "\tpath.append(current)", "\treturn path", "", "graph = [", "\t[1,1,1,1,1],", "\t[1,1,1,1,1],", "\t[1,1,1,1,1]", "]", "print cost_first(graph,(0,0),(0,3))"]}, "version": 2.0, "annotatedVariables": {"graph": {"attributes": {"size": [3, 5]}, "identifier": "graph", "rawType": "array", "abstractType": "array"}}}}